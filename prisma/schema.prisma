// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id
  email     String?   @unique
  plan      String    @default("free")
  planSince DateTime? @map("plan_since")
  createdAt DateTime  @default(now()) @map("created_at")

  // Verifiering & login
  emailVerified DateTime? @map("email_verified")
  passwordHash  String?   @map("password_hash")
  lastLoginAt   DateTime? @map("last_login_at")

  // Username för kompis-sök
  username String? @unique

  profile   Profile?
  ratings   Rating[]
  watchlist watchlist[]
  purchases Purchase[]

  // Groups
  groupMembers  GroupMember[] @relation("UserGroupMembers")
  groupsCreated Group[]       @relation("UserGroupsCreated")
  groupVotes    GroupVote[]   @relation("UserGroupVotes")

  // Friends
  friendRequestsSent     FriendRequest[] @relation("FriendRequestsSent")
  friendRequestsReceived FriendRequest[] @relation("FriendRequestsReceived")
  friendshipsAsUser      Friendship[]    @relation("FriendshipUser")
  friendshipsAsFriend    Friendship[]    @relation("FriendshipFriend")

  groupInvitesSent     GroupInvite[]    @relation("GroupInvitesFrom")
  groupInvitesReceived GroupInvite[]    @relation("GroupInvitesTo")
  groupMatchesSeen     GroupMatchSeen[]

  verifications Verification[]

  @@map("users")
}

model Profile {
  userId           String   @id @map("user_id")
  dob              DateTime @db.Date
  uiLanguage       String   @default("sv") @map("ui_language")
  yearPreference   String   @default("all") @map("year_preference")
  recycleAfterDays Int      @default(14) @map("recycle_after_days")
  region           String   @default("SE")
  locale           String   @default("sv-SE")
  providers        Json     @default("[]")
  updatedAt        DateTime @default(now()) @map("updated_at")

  // Smakprofil
  displayName    String?  @map("display_name")
  favoriteMovie  Json?    @map("favorite_movie")
  favoriteShow   Json?    @map("favorite_show")
  favoriteGenres String[] @default([]) @map("favorite_genres")
  dislikedGenres String[] @default([]) @map("disliked_genres")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

model Verification {
  token     String   @id
  userId    String   @map("user_id")
  email     String
  name      String?
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email], map: "idx_verifications_email")
  @@index([userId], map: "idx_verifications_user_id")
  @@map("verifications")
}

model Rating {
  id        String   @id
  userId    String   @map("user_id")
  tmdbId    Int      @map("tmdb_id")
  mediaType String   @map("media_type")
  rating    Int? // 1..10 (optional för bakåtkomp)
  decision  String   @default("RATED")
  decidedAt DateTime @default(now()) @map("decided_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tmdbId, mediaType])
  @@index([userId, tmdbId, mediaType], map: "idx_ratings_user_tmdb")
  @@map("ratings")
}

model watchlist {
  id        String   @id
  userId    String   @map("user_id")
  tmdbId    Int      @map("tmdb_id")
  mediaType String   @map("media_type")
  addedAt   DateTime @default(now()) @map("added_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tmdbId, mediaType])
  @@map("watchlist")
}

model Purchase {
  id                    String   @id
  userId                String   @map("user_id")
  stripePaymentIntentId String?  @map("stripe_payment_intent_id")
  amountTotal           Int      @default(0) @map("amount_total")
  currency              String   @default("SEK")
  product               String   @default("lifetime")
  createdAt             DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt], map: "idx_purchases_user")
  @@map("purchases")
}

model Group {
  code      String   @id
  createdBy String   @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")

  members     GroupMember[]
  votes       GroupVote[]      @relation("GroupVotes")
  invites     GroupInvite[] // <— behövs för relationen ovan
  matchesSeen GroupMatchSeen[] // <— bra att ha på denna sidan också

  creator User @relation("UserGroupsCreated", fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("groups")
}

model GroupMember {
  groupCode String   @map("group_code")
  userId    String   @map("user_id")
  joinedAt  DateTime @default(now()) @map("joined_at")

  group Group @relation(fields: [groupCode], references: [code], onDelete: Cascade)
  user  User  @relation("UserGroupMembers", fields: [userId], references: [id], onDelete: Cascade)

  @@id([groupCode, userId])
  @@map("group_members")
}

model GroupVote {
  groupCode String   @map("group_code")
  userId    String   @map("user_id")
  tmdbId    Int      @map("tmdb_id")
  tmdbType  String   @map("tmdb_type") // 'movie' | 'tv'
  vote      String // 'LIKE' | 'DISLIKE' | 'SKIP'
  decidedAt DateTime @default(now()) @map("decided_at")

  group Group @relation("GroupVotes", fields: [groupCode], references: [code], onDelete: Cascade)
  user  User  @relation("UserGroupVotes", fields: [userId], references: [id], onDelete: Cascade)

  @@id([groupCode, userId, tmdbId, tmdbType])
  @@map("group_votes")
}

model FriendRequest {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  fromUserId String    @map("from_user_id")
  toUserId   String    @map("to_user_id")
  status     String    @default("pending")
  createdAt  DateTime  @default(now()) @map("created_at")
  decidedAt  DateTime? @map("decided_at")

  fromUser User @relation("FriendRequestsSent", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   User @relation("FriendRequestsReceived", fields: [toUserId], references: [id], onDelete: Cascade)

  @@map("friend_requests")
}

model Friendship {
  userId    String   @map("user_id")
  friendId  String   @map("friend_id")
  createdAt DateTime @default(now()) @map("created_at")

  user   User @relation("FriendshipUser", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("FriendshipFriend", fields: [friendId], references: [id], onDelete: Cascade)

  @@id([userId, friendId])
  @@map("friendships")
}

model GroupInvite {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  groupCode   String    @map("group_code")
  fromUserId  String    @map("from_user_id")
  toUserId    String    @map("to_user_id")
  status      String    @default("pending")
  createdAt   DateTime  @default(now()) @map("created_at")
  respondedAt DateTime? @map("responded_at")

  group    Group @relation(fields: [groupCode], references: [code], onDelete: Cascade)
  fromUser User  @relation("GroupInvitesFrom", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   User  @relation("GroupInvitesTo", fields: [toUserId], references: [id], onDelete: Cascade)

  @@map("group_invites")
}

//
// NEW: per-user kvittens så overlay inte loopar
//
model GroupMatchSeen {
  groupCode String   @map("group_code")
  userId    String   @map("user_id")
  tmdbId    Int      @map("tmdb_id")
  tmdbType  String   @map("tmdb_type")
  seenAt    DateTime @default(now()) @map("seen_at")

  group Group @relation(fields: [groupCode], references: [code], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([groupCode, userId, tmdbId, tmdbType])
  @@map("group_match_seen")
}
