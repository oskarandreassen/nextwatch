// prisma/schema.prisma

// ========== GENERATOR & DATASOURCE ==========
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Neon: måste vara satt i Vercel env
}

// ========== ENUMS ==========
enum Vote {
  LIKE
  DISLIKE
  SKIP
}

enum TmdbType {
  movie
  tv
}

enum FriendRequestStatus {
  pending
  accepted
  declined
  cancelled
}

// ========== MODELS ==========
model User {
  id            String   @id
  email         String?
  username      String?  @unique
  emailVerified DateTime? @map("email_verified")
  passwordHash  String?   @map("password_hash")
  lastLoginAt   DateTime? @map("last_login_at")
  plan          String    @default("free")
  planSince     DateTime? @map("plan_since")
  createdAt     DateTime  @default(now()) @map("created_at")

  // Relations
  profile       Profile?
  purchases     Purchase[]
  groups        Group[]       @relation("GroupsCreated")
  groupMembers  GroupMember[]
  groupVotes    GroupVote[]
  ratings       Rating[]
  watchlist     Watchlist[]
  sentRequests  FriendRequest[] @relation("FromUser")
  recvRequests  FriendRequest[] @relation("ToUser")
  friendships   Friendship[]    @relation("UserFriendships")

  @@map("users")
}

model Profile {
  userId            String  @id @map("user_id")
  user              User    @relation(fields: [userId], references: [id])

  displayName       String?  @map("display_name")
  dob               DateTime? @db.Date
  uiLanguage        String    @default("sv")    @map("ui_language")
  yearPreference    String    @default("all")   @map("year_preference")
  recycleAfterDays  Int       @default(14)      @map("recycle_after_days")
  region            String    @default("SE")
  locale            String    @default("sv-SE")
  providers         Json      @default("[]")
  favoriteMovie     Json?     @map("favorite_movie")
  favoriteShow      Json?     @map("favorite_show")
  favoriteGenres    String[]  @default([])
  dislikedGenres    String[]  @default([])
  updatedAt         DateTime  @default(now())   @map("updated_at")

  @@map("profiles")
}

model Verification {
  token      String   @id
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id])
  email      String
  name       String?
  createdAt  DateTime @default(now()) @map("created_at")
  expiresAt  DateTime @map("expires_at")

  @@map("verifications")
}

model Purchase {
  id                    String   @id
  userId                String   @map("user_id")
  user                  User     @relation(fields: [userId], references: [id])
  stripePaymentIntentId String?  @map("stripe_payment_intent_id")
  amountTotal           Int      @default(0)     @map("amount_total") // minor units
  currency              String   @default("SEK")
  product               String   @default("lifetime")
  createdAt             DateTime @default(now()) @map("created_at")

  @@index([userId, createdAt], map: "idx_purchases_user")
  @@map("purchases")
}

model Group {
  code       String   @id
  createdBy  String   @map("created_by")
  creator    User     @relation("GroupsCreated", fields: [createdBy], references: [id])
  createdAt  DateTime @default(now()) @map("created_at")
  members    GroupMember[]
  votes      GroupVote[]

  @@map("groups")
}

model GroupMember {
  groupCode String   @map("group_code")
  userId    String   @map("user_id")
  joinedAt  DateTime @default(now()) @map("joined_at")

  group     Group @relation(fields: [groupCode], references: [code])
  user      User  @relation(fields: [userId], references: [id])

  @@id([groupCode, userId])
  @@map("group_members")
}

model GroupVote {
  groupCode String   @map("group_code")
  userId    String   @map("user_id")
  tmdbId    Int      @map("tmdb_id")
  tmdbType  TmdbType @map("tmdb_type")
  vote      Vote
  decidedAt DateTime @default(now()) @map("decided_at")

  group     Group @relation(fields: [groupCode], references: [code])
  user      User  @relation(fields: [userId], references: [id])

  @@id([groupCode, userId, tmdbId, tmdbType])
  @@index([groupCode, tmdbId, tmdbType], map: "idx_group_votes_group_tmdb")
  @@map("group_votes")
}

model FriendRequest {
  id         String  @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  fromUserId String  @map("from_user_id")
  toUserId   String  @map("to_user_id")
  fromUser   User    @relation("FromUser", fields: [fromUserId], references: [id])
  toUser     User    @relation("ToUser", fields: [toUserId], references: [id])
  status     FriendRequestStatus @default(pending)
  createdAt  DateTime @default(now()) @map("created_at")
  decidedAt  DateTime? @map("decided_at")

  // Viktigt: Postgres-partial UNIQUE (status='pending') hanteras i SQL-migrationen.
  // Sätt INTE @@unique här – det skulle skärpa till alla statuslägen.
  @@index([toUserId], map: "idx_friend_requests_to_pending")
  @@index([fromUserId], map: "idx_friend_requests_from_pending")
  @@map("friend_requests")
}

model Friendship {
  userId    String   @map("user_id")
  friendId  String   @map("friend_id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation("UserFriendships", fields: [userId], references: [id])
  friend    User     @relation("UserFriendships", fields: [friendId], references: [id])

  @@id([userId, friendId])
  // Unika par (LEAST/GREATEST) finns som index i SQL – kan inte uttryckas i Prisma DSL.
  @@index([userId], map: "idx_friendships_user")
  @@index([friendId], map: "idx_friendships_friend")
  @@map("friendships")
}

model Watchlist {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  tmdbId    Int      @map("tmdb_id")
  mediaType String   @map("media_type")

  @@unique([userId, tmdbId, mediaType], name: "watchlist_user_tmdb_media_unique")
  @@map("watchlist")
}

model Rating {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  tmdbId    Int      @map("tmdb_id")
  mediaType String   @map("media_type")
  value     Int

  @@index([userId, tmdbId, mediaType], map: "idx_ratings_user_tmdb")
  @@map("ratings")
}
