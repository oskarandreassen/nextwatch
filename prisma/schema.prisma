// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id
  email     String?   @unique
  plan      String    @default("free")
  planSince DateTime? @map("plan_since")
  createdAt DateTime  @default(now()) @map("created_at")

  emailVerified DateTime? @map("email_verified")
  passwordHash  String?   @map("password_hash")
  lastLoginAt   DateTime? @map("last_login_at")

  username String? @unique

  profile   Profile?
  ratings   Rating[]
  watchlist watchlist[]
  purchases Purchase[]

  // Groups
  groupMembers  GroupMember[] @relation("UserGroupMembers")
  groupsCreated Group[]       @relation("UserGroupsCreated")
  groupVotes    GroupVote[]   @relation("UserGroupVotes")

  // Friends
  friendRequestsSent     FriendRequest[] @relation("FriendRequestsSent")
  friendRequestsReceived FriendRequest[] @relation("FriendRequestsReceived")
  friendshipsAsUser      Friendship[]    @relation("FriendshipUser")
  friendshipsAsFriend    Friendship[]    @relation("FriendshipFriend")

  @@map("users")
}

model Profile {
  userId           String   @id @map("user_id")
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  displayName      String?  @map("display_name")
  dob              DateTime? @db.Date
  uiLanguage       String    @default("sv")    @map("ui_language")
  yearPreference   String    @default("all")   @map("year_preference")
  recycleAfterDays Int       @default(14)      @map("recycle_after_days")
  region           String    @default("SE")
  locale           String    @default("sv-SE")
  providers        Json
  favoriteMovie    Json?     @map("favorite_movie")
  favoriteShow     Json?     @map("favorite_show")
  favoriteGenres   String[]  @default([])
  dislikedGenres   String[]  @default([])
  updatedAt        DateTime  @default(now())   @map("updated_at")

  @@map("profiles")
}

model Verification {
  token      String   @id
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  email      String
  name       String?
  createdAt  DateTime @default(now()) @map("created_at")
  expiresAt  DateTime @map("expires_at")

  @@map("verifications")
}

model Purchase {
  id                    String   @id
  userId                String   @map("user_id")
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripePaymentIntentId String?  @map("stripe_payment_intent_id")
  amountTotal           Int      @default(0)     @map("amount_total")
  currency              String   @default("SEK")
  product               String   @default("lifetime")
  createdAt             DateTime @default(now()) @map("created_at")

  @@index([userId, createdAt], map: "idx_purchases_user")
  @@map("purchases")
}

model Group {
  code       String   @id
  createdBy  String   @map("created_by")
  creator    User     @relation("UserGroupsCreated", fields: [createdBy], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now()) @map("created_at")

  members GroupMember[]
  votes   GroupVote[]

  @@map("groups")
}

model GroupMember {
  groupCode String   @map("group_code")
  userId    String   @map("user_id")
  joinedAt  DateTime @default(now()) @map("joined_at")

  group Group @relation(fields: [groupCode], references: [code], onDelete: Cascade)
  user  User  @relation("UserGroupMembers", fields: [userId], references: [id], onDelete: Cascade)

  @@id([groupCode, userId])
  @@map("group_members")
}

enum TmdbType {
  movie
  tv
}

enum Vote {
  LIKE
  DISLIKE
  SKIP
}

model GroupVote {
  groupCode String   @map("group_code")
  userId    String   @map("user_id")
  tmdbId    Int      @map("tmdb_id")
  tmdbType  TmdbType @map("tmdb_type")
  vote      Vote
  decidedAt DateTime @default(now()) @map("decided_at")

  group Group @relation(fields: [groupCode], references: [code], onDelete: Cascade)
  user  User  @relation("UserGroupVotes", fields: [userId], references: [id], onDelete: Cascade)

  @@id([groupCode, userId, tmdbId, tmdbType])
  @@index([groupCode, tmdbId, tmdbType], map: "idx_group_votes_group_tmdb")
  @@map("group_votes")
}

model watchlist {
  id        String  @id @default(cuid())
  userId    String  @map("user_id")
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  tmdbId    Int     @map("tmdb_id")
  mediaType String  @map("media_type")

  @@unique([userId, tmdbId, mediaType], name: "watchlist_user_tmdb_media_unique")
  @@map("watchlist")
}

model Rating {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tmdbId    Int      @map("tmdb_id")
  mediaType String   @map("media_type")
  value     Int

  @@index([userId, tmdbId, mediaType], map: "idx_ratings_user_tmdb")
  @@map("ratings")
}

enum FriendRequestStatus {
  pending
  accepted
  declined
  cancelled
}

model FriendRequest {
  id         String  @id @db.Uuid @default(dbgenerated("gen_random_uuid()"))
  fromUserId String  @map("from_user_id")
  toUserId   String  @map("to_user_id")
  status     String  @default("pending")
  createdAt  DateTime  @default(now()) @map("created_at")
  decidedAt  DateTime? @map("decided_at")

  fromUser User @relation("FriendRequestsSent", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser   User @relation("FriendRequestsReceived", fields: [toUserId], references: [id], onDelete: Cascade)

  @@map("friend_requests")
}

model Friendship {
  userId    String   @map("user_id")
  friendId  String   @map("friend_id")
  createdAt DateTime @default(now()) @map("created_at")

  user   User @relation("FriendshipUser", fields: [userId], references: [id], onDelete: Cascade)
  friend User @relation("FriendshipFriend", fields: [friendId], references: [id], onDelete: Cascade)

  @@id([userId, friendId])
  @@map("friendships")
}
