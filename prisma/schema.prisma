// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  email         String?   @unique
  plan          String    @default("free")
  planSince     DateTime? @map("plan_since")
  createdAt     DateTime  @default(now()) @map("created_at")
  emailVerified DateTime? @map("email_verified") // <— NYCKEL: behövs för verifierat konto

  profile       Profile?
  ratings       Rating[]
  watchlist     watchlist[]
  purchases     Purchase[]
  groupMembers  GroupMember[] @relation("UserGroupMembers")
  groupsCreated Group[]       @relation("UserGroupsCreated")

  // NYTT:
  passwordHash String?   @map("password_hash")
  lastLoginAt  DateTime? @map("last_login_at")

  // relation till verifications
  verifications Verification[]

  @@map("users")
}

// =========================
// Profile
// =========================
model Profile {
  userId           String   @id @map("user_id")
  dob              DateTime @db.Date
  uiLanguage       String   @default("sv") @map("ui_language")
  yearPreference   String   @default("all") @map("year_preference")
  recycleAfterDays Int      @default(14) @map("recycle_after_days")
  region           String   @default("SE")
  locale           String   @default("sv-SE")
  providers        Json     @default("[]")
  updatedAt        DateTime @default(now()) @map("updated_at")

  // --- NYA fält (mappade till dina snake_case kolumner) ---
  displayName    String?  @map("display_name")
  favoriteMovie  String?  @map("favorite_movie")
  favoriteShow   String?  @map("favorite_show")
  favoriteGenres String[] @default([]) @map("favorite_genres")
  dislikedGenres String[] @default([]) @map("disliked_genres")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profiles")
}

// =========================
// Verification (ny modell)
// =========================
model Verification {
  token     String   @id
  userId    String   @map("user_id")
  email     String
  name      String?
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("verifications")
}

model Rating {
  id        String   @id
  userId    String   @map("user_id")
  tmdbId    Int      @map("tmdb_id")
  mediaType String   @map("media_type")
  decision  String
  decidedAt DateTime @default(now()) @map("decided_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, tmdbId, mediaType], map: "idx_ratings_user_tmdb")
  @@map("ratings")
}

model watchlist {
  id        String   @id
  userId    String   @map("user_id")
  tmdbId    Int      @map("tmdb_id")
  mediaType String   @map("media_type")
  addedAt   DateTime @default(now()) @map("added_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tmdbId, mediaType])
  @@map("watchlist")
}

model Purchase {
  id                    String   @id
  userId                String   @map("user_id")
  stripePaymentIntentId String?  @map("stripe_payment_intent_id")
  amountTotal           Int      @default(0) @map("amount_total")
  currency              String   @default("SEK")
  product               String   @default("lifetime")
  createdAt             DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt], map: "idx_purchases_user")
  @@map("purchases")
}

model Group {
  code      String   @id
  createdBy String   @map("created_by")
  createdAt DateTime @default(now()) @map("created_at")

  members GroupMember[]
  creator User          @relation("UserGroupsCreated", fields: [createdBy], references: [id], onDelete: Cascade)

  @@map("groups")
}

model GroupMember {
  groupCode String   @map("group_code")
  userId    String   @map("user_id")
  joinedAt  DateTime @default(now()) @map("joined_at")

  group Group @relation(fields: [groupCode], references: [code], onDelete: Cascade)
  user  User  @relation("UserGroupMembers", fields: [userId], references: [id], onDelete: Cascade)

  @@id([groupCode, userId])
  @@map("group_members")
}
